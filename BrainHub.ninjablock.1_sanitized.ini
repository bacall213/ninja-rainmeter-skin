;---------------------------------------------------------------------
; BRAINHUB >> RAINSTATS SKIN

[Rainmeter]
DynamicWindowSize=1

[Variables]
;------------------------------------------------------------------------------
; Ninja Block Sensor URLs
; Useful for quick edits throughout the skin as well as removal before sharing
;
; To get these URLs:
;  1) On the Ninja Block Dashboard, view the history for your device and 
;     select the URL provided.
;  2) Remove "from=xxxxxxxxxxxxx&" from the URL and drop it in below
;
; Example URL:
;  https://a.ninja.is/rest/v0/device/<device_id>
;             /data?interval=5min&fn=mean&user_access_token=<user_access_token>
;  
;------------------------------------------------------------------------------
; Temp/Humidity 1 Sensor URL
; Insert your sensor
Ninja433Temp1URL=""

Ninja433Humid1URL=""

; Temp/Humidity 2 Sensor URL
Ninja433Temp2URL=""
Ninja433Humid2URL=""

; Temp/Humidity 3 Sensor URL
Ninja433Temp3URL=""
Ninja433Humid3URL=""

; Ninjablock CPU URL
NinjaCPUURL=""

; Ninjablock Disk URL
NinjaDiskURL=""

; Ninjablock RAM URL
NinjaRAMURL=""
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; Ninja Block IP
; If you're executing a "Block Online" check, set your block IPs here.
;------------------------------------------------------------------------------
; Wifi IP if your block is perpetually connected via WiFi
NinjaLocalWifiIP=""

; Wired IP if your block is perpetually connected via the wired NIC
NinjaLocalWiredIP=""

; If you're checking on the block remotely, there should only be one external IP 
;  for it, regardless of the interface in use
NinjaRemoteIP=""
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; 433 Mhz Sensor Descriptions
;------------------------------------------------------------------------------
; Temperature/Humidity Sensor 1
MeasureNinja433Temp1CommonName="Living Room"
MeasureNinja433Humid1CommonName="Living Room"

; Temperature/Humidity Sensor 2
MeasureNinja433Temp2CommonName="Bedroom"
MeasureNinja433Humid2CommonName="Bedroom"

; Temperature/Humidity Sensor 3
MeasureNinja433Temp3CommonName="Bathroom"
MeasureNinja433Humid3CommonName="Bathroom"
;------------------------------------------------------------------------------

; Time zone: PDT = GMT - 07:00
TimeZone=-7

; Network cards on Ninja Block
NinjaNIC1=wlan0
NinjaNIC2=eth0

; Ninja Block RAM (in MB)
NinjaRAMTotal=251.564

; Ninja Logo
NinjaIsAliveLogo=#@#ninja_logo_alive_trans.png
NinjaIsDeadLogo=#@#ninja_logo_dead_trans.png
NinjaLogo=#@#ninja_logo_alive_trans.png
PoweredByNinja=#@#Powered-By-Ninja-Blocks.png

; Refresh every 1000 milliseconds
Update=1000

;-----------------------
; COLORS
;
; Ninja CPU Colors
CPUGraphColor=255,0,0,255
CPUGraphLabel=255,0,0,255
CPUGraphValue=255,0,0,255
;
; Ninja Disk Colors
DiskGraphColor=0,255,0,255
DiskGraphLabel=0,255,0,255
DiskGraphValue=0,255,0,255
;
; Ninja RAM Colors
RAMGraphColor=0,0,255,255
RAMGraphLabel=0,0,255,255
RAMGraphValue=0,0,255,255
;
; Temperature Sensor 1 Colors
Temp1GraphColor=255,255,255,255
Temp1GraphLabel=255,255,255,255
Temp1GraphValue=255,255,255,255
;
; Humidity Sensor 1 Colors
Humid1GraphColor=0,0,0,255
Humid1GraphLabel=0,0,0,255
Humid1GraphValue=0,0,0,255
;
; Last Update Text Color
LastUpdateColor=255,255,255,255


;----------------------------------------------
; MEASURES
;

;=== MEASURE: Block Alive Ping ===
;
[MeasureBlockAlive]
Measure=Plugin
Plugin=PingPlugin
DestAddress=#NinjaLocalWifiIP#

; Ping 180 * update (1000) = Every 180 seconds
UpdateRate=180

; Timeout after 10 seconds
Timeout=10000

; Value after timeout occurs
TimeoutValue=999999

; Ping below 15ms = Ninja is alive
IfBelowValue=15000
IfBelowAction=[!SetOption MeterNinjaLogo ImageName "#NinjaLogo#"][!ShowMeterGroup NinjaBlockAlive][!Redraw]

; Timeout value will be this unrealistic number
IfEqualValue=999999
IfEqualAction=[!SetOption MeterNinjaLogo ImageName "#NinjaIsDeadLogo#"][!DisableMeasureGroup NinjaMeasures][!HideMeterGroup NinjaBlockAlive][!Redraw]

; If the ping time hits 30ms, let's call it dead. Up to this point allows for a crappy network.
IfAboveValue=30000
IfAboveAction=[!SetOption MeterNinjaLogo ImageName "#NinjaIsDeadLogo#"][!DisableMeasureGroup NinjaMeasures][!HideMeterGroup NinjaBlockAlive][!Redraw]

; Upon successful value or timeout, update all measures and meters. This should
;  take care of refreshing the skin when the block becomes available again
FinishAction=[!Update]


;=== MEASURE: Ninja Block 433 Mhz Temp 1 ===
;
[MeasureNinja433Temp1]
Measure=Plugin
Plugin=Plugins\WebParser.dll
; UpdateRate x UpdateDivider * Update = Frequency at which Rainmeter connects
; 300 x 1 x 1000 = 300000 milliseconds = 5 min
UpdateRate=300
Url=#Ninja433Temp1URL#

; Time zone is GMT by default

; SIMPLE DATE/TIME PARSE
; Regex where...
; Input = {"t":"2013-07-27T11:11:11.000Z","v":111.5} (last block in file)
; 01=> "t"
; 02=> "2013-07-27T11:11:11.000Z"
; 03=> "v"
; 04=> 111.5
; RegExp=(?siU).*?("t").*?(".*?").*?("v").*(\d{1,3}\.\d{1,4})

; COMPLEX DATE/TIME PARSE
; Regex where...
; Input = {"t":"2013-07-27T11:11:11.000Z","v":111.5} (last block in file)
; 01=> "t"
; 02=> 2013-07-27
; 03=> 11:11:11
; 04=> "v"
; 05=> 111.5
RegExp=(?siU).*?("t").*?(\d{4}-\d{2}-\d{2}).*?T(\d{2}:\d{2}:\d{2}).*?("v").*(\d{1,3}\.\d{1,4})

; Set error string
ErrorString={"t":"0000-00-00T00:00:00.000Z","v":0.0}

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Measure Debug (enable = 1, disabled = 0)
Debug=0


[MeasureNinja433Temp1Date]
;
; Get datestamp for Temp1
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinja433Temp1]
; Index 2 using complex parse
StringIndex=2
; Flip the date into MM-DD-YYYY format
RegExpSubstitute=1
Substitute="(\d{4})-(\d{2})-(\d{2})":"\2-\3-\1"
; Set error string
ErrorString="00-00-0000"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Enable error correction if the webparser fails, but not due to a parsing error
IfEqualValue=0
IfEqualAction=[!SetOption MeterNinja433TempHumid1LastUpdate Text "Failed"][!SetOption MeterNinja433TempHumid1LastUpdate PostFix ""]

; If a usable value becomes available, re-enable the meter output
IfAboveValue=0
IfAboveAction=[!SetOption MeterNinja433TempHumid1LastUpdate Text "%1 %2"][!SetOption MeterNinja433TempHumid1LastUpdate PostFix " GMT"]


[MeasureNinja433Temp1Time]
;
; Get timestamp for Temp1
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinja433Temp1]
; Index 3 using complex parse
StringIndex=3
; Set error string
ErrorString="00:00:00"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive


[MeasureNinja433Temp1TempC]
;
; Get temperature for Temp1
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinja433Temp1]
; Min=14 and Max = 22 for Fahrenheit
;MinValue=14
;MaxValue=122
; Min=-10 and Max=50 for Celsius
MinValue=-10
MaxValue=50
; Index 5 using complex parse
StringIndex=5

; Set error string
ErrorString="0.0"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Set manual values in event of a non-fatal error
;  This will cause an erroneous reading if the value received is 0 degrees celsius
;  If value < 0, use normal formula for C to F
;  If value = 0, catch this as an error (webparser timeout probably) and use "0" as the value
;  If value > 0, we're not frozen, convert as usual
IfBelowValue=0
IfBelowAction=[!ShowMeter MeterNinja433TempGraphStats][!Redraw]

IfEqualValue=0
IfEqualAction=[!HideMeter MeterNinja433TempGraphStats]

IfAboveValue=0
IfAboveAction=[!ShowMeter MeterNinja433TempGraphStats][!Redraw]

[MeasureNinja433Temp1TempF]
;
; Convert celsius from sensor to fahrenheit
;
Measure=Calc
Formula=(((MeasureNinja433Temp1TempC * 9) / 5) + 32)
; Min=14 and Max = 22 for Fahrenheit
MinValue=14
MaxValue=122

; Set error string
ErrorString="0.0"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive


;
;=== MEASURE: Ninja Block 433 Mhz Humidity 1 ===
;
[MeasureNinja433Humid1]
Measure=Plugin
Plugin=Plugins\WebParser.dll
; UpdateRate x UpdateDivider * Update = Frequency at which Rainmeter connects
; 300 x 1 x 1000 = 300000 milliseconds = 5 min
UpdateRate=300
Url=#Ninja433Humid1URL#

; Time zone is GMT by default

; SIMPLE DATE/TIME PARSE
; Regex where...
; Input = {"t":"2013-07-27T22:06:00.000Z","v":53} (last block in file)
; 01=> "t"
; 02=> "2013-07-27T22:06:00.000Z"
; 03=> "v"
; 04=> 53
; RegExp=(?siU).*?("t").*?(".*?").*?("v").*(\d{1,3}?)

; COMPLEX DATE/TIME PARSE
; Regex where...
; Input = {"t":"2013-07-27T22:06:00.000Z","v":53} (last block in file)
; 01=> "t"
; 02=> 2013-07-27
; 03=> 22:06:00
; 04=> "v"
; 05=> 53
RegExp=(?siU).*?("t").*?(\d{4}-\d{2}-\d{2}).*?T(\d{2}:\d{2}:\d{2}).*?("v").*(\d{1,3}?)

; Set error string
ErrorString={"t":"0000-00-00T00:00:00.000Z","v":0.0}

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Measure Debug (enable = 1, disabled = 0)
Debug=0

[MeasureNinja433Humid1Date]
;
; Get datestamp for Humid 1 sensor
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinja433Humid1]
; Index 2 using complex parse
StringIndex=2
; Flip the date into MM-DD-YYYY format
RegExpSubstitute=1
Substitute="(\d{4})-(\d{2})-(\d{2})":"\2-\3-\1"
; Set error string
ErrorString="00-00-0000"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

[MeasureNinja433Humid1Time]
;
; Get timestamp for Humid 1 sensor
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinja433Humid1]
; Index 3 using complex parse
StringIndex=3
; Set error string
ErrorString="00:00:00"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

[MeasureNinja433Humid1Humidity]
;
; Get humidity for Humid 1 sensor
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinja433Humid1]
; Min=14 and Max = 22 for Fahrenheit
;MinValue=14
;MaxValue=122
; Min=-10 and Max=50 for Celsius
MinValue=0
MaxValue=100
; Index 5 using complex parse
StringIndex=5
; Set error string
ErrorString="00"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Disable humidity meter in the event of a non parsing-related error
IfEqualValue=0
IfEqualAction=[!HideMeter MeterNinja433HumidGraphStats]

; Set humidity back to the sensor when usable value is available
IfAboveValue=0
IfAboveAction=[!ShowMeter MeterNinja433HumidGraphStats][!Redraw]


;
;=== MEASURE: Temp/Humid1 Sensor Last Update in LOCAL time zone ===
;
; We're going to parse the last update for the temperature sensor only since 
;  the temperature/humidity sensors are tied together.
;
; This measure exists independently from the CPU/RAM/Disk last update measure 
;  due to the possibility that the 433 Mhz module could be disconnected but 
;  the Ninja Block is still operating.
;
; Date measure: MeasureNinja433Humid1Date (format: YY-MM-DD)
; Time measure: MeasureNinja433Humid1Time (format: HH:MM:SS)
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;=== MEASURE: Ninja Block CPU Usage ===
;
[MeasureNinjaCPU]
Measure=Plugin
Plugin=Plugins\WebParser.dll
; UpdateRate x UpdateDivider * Update = Frequency at which Rainmeter connects
; 180 x 1 x 1000 = 180000 milliseconds = 3 min
UpdateRate=180
Url=#NinjaCPUURL#

; Date and time are captured as well, but won't be used

; Time zone is GMT by default

; SIMPLE DATE/TIME PARSE
; Regex where...
; Input = {"t":"2013-07-28T21:24:00.000Z","v":2.1} (last block in file)
; 01=> "t"
; 02=> "2013-07-28T21:24:00.000Z"
; 03=> "v"
; 04=> 2.1
; RegExp=(?siU).*?("t").*?(".*?").*?("v").*(\d{1,3}\.\d{1,3})

; COMPLEX DATE/TIME PARSE
; Regex where...
; Input = {"t":"2013-07-28T21:24:00.000Z","v":2.1} (last block in file)
; 01=> "t"
; 02=> 2013-07-28
; 03=> 21:24:00
; 04=> "v"
; 05=> 2.1
RegExp=(?siU).*?("t").*?(\d{4}-\d{2}-\d{2}).*?T(\d{2}:\d{2}:\d{2}).*?("v").*(\d{1,3}\.\d{1,3})

; Set error string
ErrorString={"t":"0000-00-00T00:00:00.000Z","v":0.0}

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Measure Debug (enable = 1, disabled = 0)
Debug=0

[MeasureNinjaCPUUsage]
;
; Get CPU usage for Ninja Block
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinjaCPU]
MinValue=0
MaxValue=100
; Index 5 using complex parse
StringIndex=5
; Set error string
ErrorString="00"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Hide meter in the event of a non parsing-related error
IfEqualValue=0
IfEqualAction=[!HideMeter MeterNinjaBlockGraphCPUStats]

IfAboveValue=0
IfAboveAction=[!ShowMeter MeterNinjaBlockGraphCPUStats][!Redraw]

[MeasureNinjaCPUDate]
;
; Get CPU usage for Ninja Block - Date timestamp
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinjaCPU]
; Index 2 using complex parse
StringIndex=2
; Flip the date into MM-DD-YYYY format
RegExpSubstitute=1
Substitute="(\d{4})-(\d{2})-(\d{2})":"\2-\3-\1"
; Set error string
ErrorString="00-00-0000"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Enable error correction if the webparser fails, but not due to a parsing error
IfEqualValue=0
IfEqualAction=[!SetOption MeterNinjaBlockLastUpdate Text "Failed"][!SetOption MeterNinjaBlockLastUpdate PostFix ""]

; If a usable value becomes available, re-enable the meter output
IfAboveValue=0
IfAboveAction=[!SetOption MeterNinjaBlockLastUpdate Text "%1 %2"][!SetOption MeterNinjaBlockLastUpdate PostFix " GMT"]

[MeasureNinjaCPUTime]
;
; Get CPU usage for Ninja Block - Time timestamp
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinjaCPU]
; Index 3 using complex parse (format HH:MM:ss GMT)
StringIndex=3
; Set error string
ErrorString="00:00:00"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive


;
;=== MEASURE: CPU/RAM/Disk Last Update in LOCAL time zone ===
;
; We're going to parse the last update for the temperature sensor only since 
;  the temperature/humidity sensors are tied together.
;
;
;
;
;
;
;
;
;



;
;=== MEASURE: Ninja Block Disk Usage ===
;
[MeasureNinjaDisk]
Measure=Plugin
Plugin=Plugins\WebParser.dll
; UpdateRate x UpdateDivider * Update = Frequency at which Rainmeter connects
; 180 x 1 x 1000 = 180000 milliseconds = 3 min
UpdateRate=180
Url=#NinjaDiskURL#

; Date and time are captured as well, but won't be used

; Time zone is GMT by default

; SIMPLE DATE/TIME PARSE
; Regex where...
; Input = {"t":"2013-07-28T21:35:00.000Z","v":38} (last block in file)
; 01=> "t"
; 02=> "2013-07-28T21:35:00.000Z"
; 03=> "v"
; 04=> 38
; RegExp=(?siU).*?("t").*?(".*?").*?("v").*(\d{1,3}?)

; COMPLEX DATE/TIME PARSE
; Regex where...
; Input = {"t":"2013-07-28T21:35:00.000Z","v":38} (last block in file)
; 01=> "t"
; 02=> 2013-07-28
; 03=> 21:35:00
; 04=> "v"
; 05=> 38
RegExp=(?siU).*?("t").*?(\d{4}-\d{2}-\d{2}).*?T(\d{2}:\d{2}:\d{2}).*?("v").*(\d{1,3}?)

; Set error string
ErrorString={"t":"0000-00-00T00:00:00.000Z","v":00}

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Measure Debug (enable = 1, disabled = 0)
Debug=0

[MeasureNinjaDiskUsage]
;
; Get Disk usage for Ninja Block
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinjaDisk]
MinValue=0
MaxValue=100
; Index 5 using complex parse
StringIndex=5
; Set error string
ErrorString="00"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Hide meter in the event of a non parsing-related error
IfEqualValue=0
IfEqualAction=[!HideMeter MeterNinjaBlockGraphDiskStats]

IfAboveValue=0
IfAboveAction=[!ShowMeter MeterNinjaBlockGraphDiskStats][!Redraw]




;
;=== MEASURE: Ninja Block RAM Usage ===
;
[MeasureNinjaRAM]
Measure=Plugin
Plugin=Plugins\WebParser.dll
; UpdateRate x UpdateDivider * Update = Frequency at which Rainmeter connects
; 180 x 1 x 1000 = 180000 milliseconds = 3 min
UpdateRate=180
Url=#NinjaRAMURL#

; Date and time are captured as well, but won't be used

; Time zone is GMT by default

; SIMPLE DATE/TIME PARSE
; Regex where...
; Input = {"t":"2013-08-03T08:28:00.000Z","v":86} (last block in file)
; 01=> "t"
; 02=> "2013-08-03T08:28:00.000Z"
; 03=> "v"
; 04=> 86
; RegExp=(?siU).*?("t").*?(".*?").*?("v").*(\d{1,3}?)

; COMPLEX DATE/TIME PARSE
; Regex where...
; Input = {"t":"2013-08-03T08:28:00.000Z","v":86} (last block in file)
; 01=> "t"
; 02=> 2013-08-03
; 03=> 08:28:00
; 04=> "v"
; 05=> 86
RegExp=(?siU).*?("t").*?(\d{4}-\d{2}-\d{2}).*?T(\d{2}:\d{2}:\d{2}).*?("v").*(\d{1,3}?)

; Set error string
ErrorString={"t":"0000-00-00T00:00:00.000Z","v":00.00}

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Measure Debug (enable = 1, disabled = 0)
Debug=0

[MeasureNinjaRAMUsage]
;
; Get RAM usage for Ninja Block
; Actually grabs free RAM... we'll do some math below.
;
Measure=Plugin
Plugin=Plugins\WebParser.dll
URL=[MeasureNinjaRAM]
MinValue=0
MaxValue=100
; Index 5 using complex parse
StringIndex=5
; Set error string
ErrorString="00"

; Set group for more more efficient control
Group=NinjaBlock | NinjaMeasures | NinjaBlockAlive

; Hide meter in the event of a non parsing-related error
IfEqualValue=0
IfEqualAction=[!HideMeter MeterNinjaBlockGraphRAMStats]

IfAboveValue=0
IfAboveAction=[!ShowMeter MeterNinjaBlockGraphRAMStats][!Redraw]


;----------------------------------------------
; STYLES



;----------------------------------------------
; BACKGROUND PANELS



;----------------------------------------------
; TEXT METERS
;
;=== METER: Block stats - last update ===
;
[MeterNinjaBlockLastUpdate]
Meter=String
MeasureName=MeasureNinjaCPUDate
MeasureName2=MeasureNinjaCPUTime
X=271
Y=62
FontSize=6
FontColor=#LastUpdateColor#
StringAlign=Right
AntiAlias=1
Prefix="Last update: "
Postfix=" GMT"
StringCase=Upper
Text="%1 %2"
Group=NinjaBlock | NinjaBlockAlive

;
;=== METER: Temp/Humidity Sensor 1 - last update ===
;
[MeterNinja433TempHumid1LastUpdate]
Meter=String
MeasureName=MeasureNinja433Temp1Date
MeasureName2=MeasureNinja433Temp1Time
X=271
Y=137
FontSize=6
FontColor=#LastUpdateColor#
StringAlign=Right
AntiAlias=1
Prefix="Last update: "
Postfix=" GMT"
StringCase=Upper
Text="%1 %2"
Group=NinjaBlock | NinjaBlockAlive


;----------------------------------------------
; GRAPHIC METERS
;
;=== GRAPHIC METER: Ninja Logo ===
;
[MeterNinjaLogo]
Meter=Image
ImageName=#NinjaLogo#
X=0
Y=0
W=45
Tile=0
PreserveAspectRatio=1


;=== GRAPHIC METER: Powered by Ninja ===
;
[MeterPoweredByNinja]
Meter=Image
ImageName=#PoweredByNinja#
; Near the bottom/center of temp/humid 1 graph
;X=130
;Y=150

; Behind the block CPU/Disk/RAM graph
X=55
Y=0

; W=215 with X=55 sets the logo perfectly behind the graph
W=215
;H=60, effectively = height of graphs

; Suggested Width and Height options for placement below everything
;W=90
;H=28
Tile=0
PreserveAspectRatio=1
ImageAlpha=30
Group=NinjaBlock | NinjaBlockAlive


;
;=== GRAPHIC METER: Ninja Block CPU/Disk/RAM Usage ===
;
[MeterNinjaBlockGraph]
;
; Ninja Block CPU/Disk/RAM Graph
;
Meter=Line
MeasureName=MeasureNinjaCPUUsage
MeasureName2=MeasureNinjaDiskUsage
MeasureName3=MeasureNinjaRAMUsage
X=55
Y=0
W=215
H=60
LineCount=3
; CPU Use
LineColor=#CPUGraphColor#
; Disk Use
LineColor2=#DiskGraphColor#
; RAM Use
LineColor3=#RAMGraphColor#
; Background
SolidColor=255,255,255,50
AntiAlias=1
AutoScale=0
HorizontalLines=0
LineWidth=1
; The file to be parsed is updated every minute, but a minute is a long time to wait without movement, so we'll update every 30 seconds.
UpdateDivider=10
Group=NinjaBlock | NinjaBlockAlive

[MeterNinjaBlockGraphLabel]
Meter=String
; X=260 if graphs are W=200
; X=260
; X=275 if graphs are W=215
X=275
Y=r
FontSize=8
FontColor=255,255,255,255
StringStyle=Bold
StringAlign=Left
AntiAlias=1
Prefix=""
Postfix=""
StringCase=Upper
Text="Ninja Block"
StringEffect=Shadow
Group=NinjaBlock | NinjaBlockAlive

[MeterNinjaBlockGraphCPUStats]
Meter=String
MeasureName=MeasureNinjaCPUUsage
X=r
Y=16r
FontSize=8
FontColor=#CPUGraphLabel#
StringStyle=Bold
StringAlign=Left
AntiAlias=1
Prefix="CPU Use: "
Postfix="%"
StringCase=Upper
Group=NinjaBlock | NinjaBlockAlive

[MeterNinjaBlockGraphDiskStats]
Meter=String
MeasureName=MeasureNinjaDiskUsage
X=r
Y=16r
FontSize=8
FontColor=#DiskGraphLabel#
StringStyle=Bold
StringAlign=Left
AntiAlias=1
Prefix="Disk Use: "
Postfix="%"
StringCase=Upper
Group=NinjaBlock | NinjaBlockAlive

[MeterNinjaBlockGraphRAMStats]
Meter=String
MeasureName=MeasureNinjaRAMUsage
X=r
Y=16r
FontSize=8
FontColor=#RAMGraphLabel#
StringStyle=Bold
StringAlign=Left
AntiAlias=1
Prefix="RAM Use: "
Postfix="%"
StringCase=Upper
Group=NinjaBlock | NinjaBlockAlive


;=== GRAPHIC METER: Ninja Block 433 Mhz Temp1/Humidity1 ===
;
[MeterNinja433TempHumidGraph]
;
; Temperature/Humidity 1 Sensors Line Graph 
;
Meter=Line
MeasureName=MeasureNinja433Temp1TempF
MeasureName2=MeasureNinja433Humid1Humidity
X=55
Y=75
W=215
H=60
LineCount=2
; Temperature
LineColor=#Temp1GraphColor#
; Humidity
LineColor2=#Humid1GraphColor#
;LineColor3=...
; Background
SolidColor=255,255,255,50
AntiAlias=1
AutoScale=0
HorizontalLines=0
LineWidth=1
UpdateDivider=10
Group=433TempHumid1 | NinjaBlockAlive

[MeterNinja433TempHumidGraphLabel]
Meter=String
; X=260 if graphs are W=200
; X=260
; X=275 if graphs are W=215
X=275
Y=5r
FontSize=8
FontColor=255,255,255,255
StringStyle=Bold
StringAlign=Left
AntiAlias=1
Text=#MeasureNinja433Temp1CommonName#
StringEffect=Shadow
StringCase=Upper
Group=433TempHumid1 | NinjaBlockAlive

[MeterNinja433TempGraphStats]
Meter=String
MeasureName=MeasureNinja433Temp1TempF
X=r
Y=18r
FontSize=8
FontColor=#Temp1GraphLabel#
StringStyle=Bold
StringAlign=Left
AntiAlias=1
Prefix="Temp: "
Postfix="F"
StringCase=Upper
Group=433TempHumid1 | NinjaBlockAlive

[MeterNinja433HumidGraphStats]
Meter=String
MeasureName=MeasureNinja433Humid1Humidity
X=r
Y=18r
FontSize=8
FontColor=#Humid1GraphLabel#
StringStyle=Bold
StringAlign=Left
AntiAlias=1
Prefix="Humidity: "
Postfix="%"
StringCase=Upper
Group=433TempHumid1 | NinjaBlockAlive


;----------------------------------------------
; METADATA

[Metadata]
Name=Ninjablock Rainstats
Author=Brian Call
Information=Presents information from a Ninjablock | | Requires: | - Ninja Block | - ninja-cpu driver (CPU usage) | - ninja-mem driver (RAM usage) | - Modified ninja-diskspace driver (Drive usage) | | Pulls data from: | - 433MHz Temperature/Humidity Sensors | - Ninja Block internal components | | Other features: | - Detects block offline/online and changes logo accordingly | | Important to note: | The graphs update more often then the data does. This is by design to reduce network activity while making the graphs look interesting. No data point received by the Ninja Block is important enough that it needs to be refreshed more than once every minute, if that. However, no one likes stagnant graphs.
Version=1.0.20130730
License=Creative Commons Attribution-Non-Commercial-Share Alike 3.0
;
; END OF SKIN
